# ? Замыкание (англ. closure) в программировании — функция первого класса,
# в теле которой присутствуют ссылки на переменные, объявленные вне тела
# этой функции в окружающем коде и не являющиеся её параметрами.
# ? Декоратор — структурный шаблон проектирования, предназначенный для
# динамического подключения дополнительного поведения к объекту.
# Подробный текст лекции
# 1. Что такое замыкания
# Прежде чем погрузиться в декораторы поговорим о замыканиях в
# программировании вообще и в Python в частности. Плюс стоит вспомнить об
# областях видимости в Python.

# Области видимости

# def func(a):
#     x = 1
#     res = x + a
#     return res
#
#
# x = 100
# print(func(5))

# В этом примере глобальная переменная x равна 73, но при сложении внутри
# функции к значению a прибавляется 42 — значение локальной переменной x.
# Функция как объект высшего порядка

# Рассмотрим простой пример функции:


# def add_str(a: str, b: str) -> str:
#     return a + ' ' + b
#
#
# print(add_str('Hello', 'world!'))

# На вход передаём две строки и возвращаем новую из двух старый и пробела
# посередине. Но функцию можно переписать иначе. Вспомним, что в Python все
# функции высшего порядка. А это значит, что их можно передавать как объекты в
# другие функции:

from typing import Callable


def add_one_str(a: str) -> Callable[[str], str]:
    def add_two_str(b: str) -> str:
        return a + ' ' + b
    return add_two_str


print(add_one_str('Hello')('world!'))

# Результат получили такой же, но код работает иначе.

# ? Функция add_one_str принимает на вход один параметр в качестве начала
# строки и возвращает локальную функцию add_two_str. Обратите внимание на
# отсутствие круглых скобок. Функцию передаём, а не вызываем.
# ? Функция add_two_str принимает вторую часть строки, соединяет её с первой
# и возвращает ответ.
# ? При вызове функций значения указывается в отдельных круглых скобках.
# Первое попадает в параметр a. Далее часть строки: add_one_str('Hello')
# возвращает функцию add_two_str и уже она вызывается и принимает
# аргумент во вторых скобках.
# Благодаря передаче одной функции другой мы можем создавать замыкания.

# Задача №49. Решение в группах
# Планеты вращаются вокруг звезд по эллиптическим орбитам. 
# Назовем самой далекой планетой ту, орбита которой имеет 
# самую большую площадь. Напишите функцию 
# find_farthest_orbit(list_of_orbits), которая среди списка орбит 
# планет найдет ту, по которой вращается самая далекая 
# планета. Круговые орбиты не учитывайте: вы знаете, что у 
# вашей звезды таких планет нет, зато искусственные спутники 
# были были запущены на круговые орбиты. Результатом 
# функции должен быть кортеж, содержащий длины полуосей 
# эллипса орбиты самой далекой планеты. Каждая орбита 
# представляет из себя кортеж из пары чисел - полуосей ее 
# эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b, 
# где a и b - длины полуосей эллипса. При решении задачи 
# используйте списочные выражения. Подсказка: проще всего 
# будет найти эллипс в два шага: сначала вычислить самую 
# большую площадь эллипса, а затем найти и сам эллипс, 
# имеющий такую площадь. Гарантируется, что самая далекая 
# планета ровно одна
# Пример ввода и вывода данных представлены на
# следующем слайде
# 20 минут
# Семинар 7. Функции высшего порядка
# Задача №49. Решение в группах
# Ввод:
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)] полуоси
# print(*find_farthest_orbit(orbits))
# Вывод:
# 2.5 10

# создать список из кортежей

# planets = [(2,3), (5,8), (2,7), (1,9), (7,7)] 
# надо избавиться от Круговые орбиты 
# надо перемножить элементы нашего кортежа и умножить на пи
# и вывести на экран 2 цифры которые дали нам эту площадь
# высчитиать площадь кортежей
# найти самую большую и вывести 

import random

list_planets = [(random.randint(1,10),random.randint(1,10)) for _ in range(15)]
print(list_planets)

list_planets = list(filter(lambda x: x[0] != x[1], list_planets))
# print(list_planets)


# weight_planets = list(map(lambda x: x[0] * x[1], list_planets))
# print(weight_planets)


# print(max(enumerate(weight_planets), key = lambda x: x[1]))
# print()


# max_index = max(enumerate(weight_planets), key = lambda x: x[1])[0]
# print(list_planets[max_index])

# или так : 
max_index = max(list_planets, key = lambda x: x[0] * x[1])
print(max_index)

# все принты по порядку
# [(7, 3), (8, 6), (5, 10), (2, 7), (4, 4), (5, 10), (8, 5), (8, 4), (3, 8), (4, 2), (10, 6), (10, 6), (6, 2), (7, 1), (9, 9)]
# [(7, 3), (8, 6), (5, 10), (2, 7), (5, 10), (8, 5), (8, 4), (3, 8), (4, 2), (10, 6), (10, 6), (6, 2), (7, 1)]
# [21, 48, 50, 14, 50, 40, 32, 24, 8, 60, 60, 12, 7]
# (9, 60)

# (10, 6)
# (10, 6)
